import errno
import json
import os
import time
import urllib
import subprocess
import sys
import re

"""
Traverses the search results from the first run generated by download.py
"""

API_KEY = ''
QUERY_URL = 'http://api.rottentomatoes.com/api/public/v1.0/movies.json?'

INPUT_TSV = '../sql/dataset.tsv'

IN_DIR_NAME = 'data'
OUT_DIR_NAME = 'data_%s' % time.strftime('%Y%m%d-%H%M')

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

def fetch_data(movie_id, title, next_link):
    params = {}
    params['apikey'] = API_KEY
    params['q'] = title
    params['page_limit'] = 1
    try:
        json_fetch = urllib.urlopen(next_link + '&' + urllib.urlencode(params))
        json_data = json.load(json_fetch)
        if not 'movies' in json_data or len(json_data['movies']) == 0:
            print 'No json_data fetched for (%s) "%s"' % (movie_id, title)
            return
        fetched_title = json_data['movies'][0]['title']
        out_filename = '%s.json' % (movie_id)
        json_dump = json.dumps(json_data, indent=4)

        if fetched_title.lower().find(title.lower()) != 0:
            #print 'Fetched wrong movie: %s instead of (%s) %s' % (fetched_title, movie_id, title)
            out_filename = 'wrong-' + out_filename
            json_dump = "imdb title: %s\n%s" % (title, json_dump)
        else:
            # Find better place to do this
            os.rename("%s/wrong-%s.json" % (IN_DIR_NAME, movie_id),
                      "%s/processed-%s.json" % (IN_DIR_NAME, movie_id))

        out = open('%s/%s' % (OUT_DIR_NAME, out_filename), 'w')
        out.write(json_dump)
        out.close()
    except Exception as e:
        print "Unexpected error on %s: %s" % (movie_id, e)
    else:
        out.close()

def process_file(filename):
    # print "processing %s" % filename
    f = open("%s/%s" % (IN_DIR_NAME, filename))
    line = f.readline().strip()
    movie_id = filename[len("wrong-"):-len(".json")]
    imdb_title = re.match("imdb title: (.*)$", line).groups()[0]
    j = json.load(f)
    if 'next' in j['links']:
        next = j['links']['next']
        fetch_data(movie_id, imdb_title, next)
    else:
        print "no next link for (%s) %s" % (movie_id, imdb_title)

if __name__ == '__main__':
    mkdir_p(OUT_DIR_NAME)

    # Unbuffered tee
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
    tee = subprocess.Popen(["tee", "%s/next-log.txt" % OUT_DIR_NAME], stdin=subprocess.PIPE)
    os.dup2(tee.stdin.fileno(), sys.stdout.fileno())
    os.dup2(tee.stdin.fileno(), sys.stderr.fileno())

    print "Writing to %s" % OUT_DIR_NAME

    # process files
    cnt = 0
    for filename in os.listdir(IN_DIR_NAME):
        if filename.find('wrong') != 0:
            continue
        process_file(filename)
        if ++cnt % 50:
            time.sleep(2)
